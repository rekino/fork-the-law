/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'

const LocaleIndexLazyRouteImport = createFileRoute('/$locale/')()
const LocaleConstitutionLazyRouteImport = createFileRoute(
  '/$locale/constitution',
)()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexLazyRoute = LocaleIndexLazyRouteImport.update({
  id: '/$locale/',
  path: '/$locale/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/$locale/index.lazy').then((d) => d.Route))
const LocaleConstitutionLazyRoute = LocaleConstitutionLazyRouteImport.update({
  id: '/$locale/constitution',
  path: '/$locale/constitution',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/$locale/constitution.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale/constitution': typeof LocaleConstitutionLazyRoute
  '/$locale': typeof LocaleIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale/constitution': typeof LocaleConstitutionLazyRoute
  '/$locale': typeof LocaleIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale/constitution': typeof LocaleConstitutionLazyRoute
  '/$locale/': typeof LocaleIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$locale/constitution' | '/$locale'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$locale/constitution' | '/$locale'
  id: '__root__' | '/' | '/$locale/constitution' | '/$locale/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleConstitutionLazyRoute: typeof LocaleConstitutionLazyRoute
  LocaleIndexLazyRoute: typeof LocaleIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/constitution': {
      id: '/$locale/constitution'
      path: '/$locale/constitution'
      fullPath: '/$locale/constitution'
      preLoaderRoute: typeof LocaleConstitutionLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleConstitutionLazyRoute: LocaleConstitutionLazyRoute,
  LocaleIndexLazyRoute: LocaleIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
